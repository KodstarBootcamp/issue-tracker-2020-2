[{"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/index.js":"1","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/App.js":"2","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/reportWebVitals.js":"3","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/component/issue/Issues.js":"4","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/createIssue.js":"5","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/getIssues.js":"6","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/getIssue.js":"7","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/deleteIssue.js":"8","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/editIssue.js":"9","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/component/nav/Navigation.js":"10","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/getLabels.js":"11","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/model/issue/Issue.js":"12","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/getFilteredIssues.js":"13","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/getSortedIssues.js":"14","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/deleteSelectedIssues.js":"15","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/component/issue/CreateIssue.js":"16","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/component/issue/IssueDetail.js":"17","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/addComment.js":"18","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/deleteComment.js":"19","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/custom/httpCustomValues.js":"20","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/component/login/Login.js":"21","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/history.js":"22","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/component/issue/IssueWorkflow.js":"23","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/getStates.js":"24","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/model/issue/IssueWorkflowCard.js":"25","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/changeState.js":"26","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/addColumn.js":"27","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/getAssignedIssues.js":"28","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/getMyIssues.js":"29"},{"size":742,"mtime":1610828877132,"results":"30","hashOfConfig":"31"},{"size":2258,"mtime":1610904742548,"results":"32","hashOfConfig":"31"},{"size":362,"mtime":1609271935708,"results":"33","hashOfConfig":"31"},{"size":6822,"mtime":1610908173264,"results":"34","hashOfConfig":"31"},{"size":342,"mtime":1610384015796,"results":"35","hashOfConfig":"31"},{"size":279,"mtime":1610897686047,"results":"36","hashOfConfig":"31"},{"size":217,"mtime":1610384049396,"results":"37","hashOfConfig":"31"},{"size":240,"mtime":1610384025756,"results":"38","hashOfConfig":"31"},{"size":517,"mtime":1610384032948,"results":"39","hashOfConfig":"31"},{"size":848,"mtime":1610902445271,"results":"40","hashOfConfig":"31"},{"size":225,"mtime":1610384059888,"results":"41","hashOfConfig":"31"},{"size":7624,"mtime":1610908835356,"results":"42","hashOfConfig":"31"},{"size":737,"mtime":1610906402388,"results":"43","hashOfConfig":"31"},{"size":1243,"mtime":1610908233624,"results":"44","hashOfConfig":"31"},{"size":308,"mtime":1610384037460,"results":"45","hashOfConfig":"31"},{"size":5813,"mtime":1610500465266,"results":"46","hashOfConfig":"31"},{"size":7024,"mtime":1610391821900,"results":"47","hashOfConfig":"31"},{"size":316,"mtime":1610384008308,"results":"48","hashOfConfig":"31"},{"size":300,"mtime":1610384021320,"results":"49","hashOfConfig":"31"},{"size":190,"mtime":1610369868292,"results":"50","hashOfConfig":"31"},{"size":2102,"mtime":1610903578860,"results":"51","hashOfConfig":"31"},{"size":88,"mtime":1610380835484,"results":"52","hashOfConfig":"31"},{"size":3301,"mtime":1610902369451,"results":"53","hashOfConfig":"31"},{"size":216,"mtime":1610547265955,"results":"54","hashOfConfig":"31"},{"size":810,"mtime":1610673675466,"results":"55","hashOfConfig":"31"},{"size":270,"mtime":1610797711330,"results":"56","hashOfConfig":"31"},{"size":264,"mtime":1610901282575,"results":"57","hashOfConfig":"31"},{"size":226,"mtime":1610904469632,"results":"58","hashOfConfig":"31"},{"size":233,"mtime":1610906682712,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"r8iyi5",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"62"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"62"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"62"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"62"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"62"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/index.js",[],["126","127"],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/App.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/reportWebVitals.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/component/issue/Issues.js",["128"],"import React, { useEffect, useState } from 'react'\nimport {\n  Container,\n  Form,\n  Navbar,\n  Nav,\n  Dropdown,\n  Badge,\n  InputGroup,\n  Button\n} from 'react-bootstrap'\nimport Issue from '../../model/issue/Issue'\nimport { getLabels } from '../../service/getLabels'\nimport Pagination from '@material-ui/lab/Pagination'\n\nimport './scss/issues.scss'\n\nexport default function Issues () {\n  let [labels, setItem] = useState([])\n  let [filteredLabels, setFilteredLabels] = useState([])\n  let [filterOfLabel, setLabelFilter] = useState('')\n  let [filterIssue, setIssueFilter] = useState('')\n  let [check, setCheck] = useState(false)\n  let [sort, setSort] = useState('')\n  let [showDeleteButton, setVisibility] = useState('hidden')\n  let [deleteSelected, setDelete] = useState(false)\n  let [pageSize, setPageSize] = useState(0)\n  let [currentPage, setCurrent] = useState(0)\n\n  useEffect(() => {\n    getLabels().then(labels => {\n      setItem(labels.data)\n      setFilteredLabels(labels.data)\n    })\n  }, [])\n\n  useEffect(() => {\n    let updatedLabels = []\n    labels.forEach(element =>\n      element.labelName.search(filterOfLabel) !== -1\n        ? updatedLabels.push(element)\n        : null\n    )\n    setFilteredLabels([...updatedLabels])\n  }, [filterOfLabel])\n\n  const handleFilterIssue = e => {\n    setIssueFilter(e.target.value)\n  }\n\n  const handleLabelSelection = e => {\n    setIssueFilter('label:' + e)\n  }\n\n  const handleCheckBox = e => {\n    setCheck(e.target.checked)\n  }\n  const askDelete = (willShow, isDeleted) => {\n    setVisibility(willShow)\n  }\n\n  const sendDelete = () => {\n    if (showDeleteButton === 'visible') {\n      setDelete(true)\n    }\n  }\n\n  const getPageSize = pageSize => {\n    let pages = Math.ceil(pageSize / 3)\n    setPageSize(pages)\n  }\n\n  const setCurrentPage = (event, value) => {\n    setCurrent(value)\n  }\n\n  const sortSelections = [\n    'Newest',\n    'Oldest',\n    'Recently Updated',\n    'Least Recently Updated',\n    'My Issues'\n  ]\n\n  return (\n    <div className='issues'>\n      <Container className='issue-container'>\n        <Navbar collapseOnSelect expalnd='lg' bg='dark' variant='dark'>\n          <Form>\n            <Form.Check\n              checked={check}\n              onChange={e => {\n                handleCheckBox(e)\n              }}\n            ></Form.Check>\n            <button\n              type='button'\n              className='delete-all'\n              style={{ visibility: showDeleteButton }}\n              onClick={() => sendDelete()}\n            >\n              <i className='delete-all-icon'></i>\n              <span className='delete-all-text'>{'(delete all)'}</span>\n            </button>\n            <div className='search-container'>\n              <Form.Control\n                className='search'\n                placeholder='title:  description:  label:'\n                onChange={handleFilterIssue.bind(this)}\n                value={filterIssue}\n              ></Form.Control>\n            </div>\n          </Form>\n          <Navbar.Toggle aria-controls='responsive-navbar-nav' />\n          <Navbar.Collapse id='responsive-navbar-nav'>\n            <Nav className='mr-auto'></Nav>\n            <Nav>\n              <Dropdown className='sort-dropdown'>\n                <Dropdown.Toggle id='dropdown-sort' variant='outline-info'>\n                  Sort\n                </Dropdown.Toggle>\n                <Dropdown.Menu className='sort-dropdown-container'>\n                  {sortSelections.map((s, i) => (\n                    <Dropdown.Item\n                      key={i}\n                      onClick={() => {\n                        setSort(s)\n                      }}\n                    >\n                      {s}\n                    </Dropdown.Item>\n                  ))}\n                </Dropdown.Menu>\n              </Dropdown>\n              <Dropdown className='label-dropdown'>\n                <Dropdown.Toggle id='dropdown-label' variant='outline-info'>\n                  Label\n                </Dropdown.Toggle>\n                <Dropdown.Menu className='label-dropdown-container'>\n                  <Form>\n                    <InputGroup>\n                      <Form.Control\n                        type='text'\n                        placeholder='type something..'\n                        value={filterOfLabel}\n                        onChange={e => setLabelFilter(e.target.value)}\n                      ></Form.Control>\n                      <InputGroup.Append>\n                        <Button\n                          onClick={() => {\n                            setLabelFilter('')\n                          }}\n                          variant='outline-secondary'\n                        >\n                          <i className='clean-icon'></i>\n                        </Button>\n                      </InputGroup.Append>\n                    </InputGroup>\n                  </Form>\n                  <Dropdown.Item\n                    onSelect={() => {\n                      handleLabelSelection('')\n                    }}\n                    onClick={() => {\n                      setLabelFilter('unlabeled')\n                    }}\n                  >\n                    unlabeled\n                  </Dropdown.Item>\n                  {filteredLabels.map(label => {\n                    return (\n                      <Dropdown.Item\n                        onSelect={() => {\n                          handleLabelSelection(label.labelName)\n                        }}\n                        href=''\n                        key={label.id}\n                        onClick={() => {\n                          setLabelFilter(label.labelName)\n                        }}\n                      >\n                        <Badge style={{ backgroundColor: label.labelColor }}>\n                          {label.labelName[0].toUpperCase()}\n                        </Badge>\n                        {label.labelName}\n                      </Dropdown.Item>\n                    )\n                  })}\n                </Dropdown.Menu>\n              </Dropdown>\n              <Button\n                href='/issues/new'\n                type='button'\n                className='add-issue-btn'\n                variant='outline-success'\n              >\n                Add Issue\n              </Button>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n        <Issue\n          issueFilter={filterIssue}\n          checkStatus={check}\n          sortParams={sort}\n          isShow={askDelete}\n          deleteSelections={deleteSelected}\n          getPages={getPageSize}\n          page={currentPage}\n        />\n      </Container>\n      <div className='pagination-container container'>\n        <Pagination\n          count={pageSize}\n          variant='outlined'\n          color='primary'\n          onChange={setCurrentPage}\n        />\n      </div>\n    </div>\n  )\n}\n","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/createIssue.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/getIssues.js",["129"],"import axios from 'axios'\n\nexport const getIssues = async (page = 1, size = 3) => {\n  const url = 'issues' + '?page=' + (page - 1) + '&size=' + size\n  const response = await axios.get(url, {\n    headers: { Authorization: localStorage.getItem('token') }\n  })\n\n  return response\n}\n","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/getIssue.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/deleteIssue.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/editIssue.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/component/nav/Navigation.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/getLabels.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/model/issue/Issue.js",["130","131","132","133","134"],"import React, { useState, useEffect } from 'react'\nimport { Badge, Button, Form, FormCheck, Table } from 'react-bootstrap'\nimport { getFilteredIssues } from '../../service/getFilteredIssues'\nimport { getSortedIssues } from '../../service/getSortedIssues'\nimport { deleteSelectedIssues } from '../../service/deleteSelectedIssues'\nimport './scss/issue.scss'\nimport { getLabels } from '../../service/getLabels'\nimport { getIssues } from '../../service/getIssues'\nimport { deleteIssue } from '../../service/deleteIssue'\n\nexport default function Issue (props) {\n  let [issues, setIssues] = useState([])\n  let [checkedIssues, setCheck] = useState([])\n\n  let {\n    issueFilter,\n    checkStatus,\n    sortParams,\n    isShow,\n    deleteSelections,\n    getPages,\n    page\n  } = props\n\n  const dateOptions = {\n    day: '2-digit',\n    year: '2-digit',\n    month: 'short'\n  }\n  const timeOptions = {\n    hour: '2-digit',\n    minute: '2-digit'\n  }\n\n  useEffect(() => {\n    let keyword = issueFilter\n      .slice(0, issueFilter.indexOf(':'))\n      .replace(/\\s/gi, '')\n\n    let filterKeyword = issueFilter\n      .slice(issueFilter.indexOf(':') + 1)\n      .replace(/\\s/gi, '')\n\n    if (keyword === 'label' && filterKeyword !== '') {\n      getLabels().then(l => {\n        l.data.map(label =>\n          label.labelName === filterKeyword\n            ? getFilteredIssues(keyword + ':' + label.id).then(issue =>\n                issue.data.content === undefined\n                  ? setIssues(issue.data)\n                  : setIssues(issue.data.content)\n              )\n            : null\n        )\n      })\n    } else {\n      getFilteredIssues(issueFilter).then(issue =>\n        issue.data.content === undefined\n          ? setIssues(issue.data)\n          : setIssues(issue.data.content)\n      )\n    }\n  }, [issueFilter])\n\n  useEffect(() => {\n    if (page) {\n      getIssues(page).then(i => setIssues(i.data.content))\n    }\n  }, [page])\n\n  useEffect(() => {\n    if (sortParams !== '' && sortParams !== 'My Issues') {\n      getSortedIssues(sortParams).then(issue => {\n        setIssues(issue.data.content)\n      })\n    } else if (sortParams === 'My Issues') {\n      getSortedIssues(sortParams).then(issue => {\n        setIssues(issue.data)\n        getPages(issue.data.length)\n      })\n    }\n  }, [sortParams])\n\n  useEffect(() => {\n    let tempArray = []\n    if (issues.length !== 0) {\n      issues.map(i => tempArray.push({ id: i.id, status: checkStatus }))\n      setCheck(tempArray)\n    }\n  }, [checkStatus]) //after select all changed\n\n  useEffect(() => {\n    let selected = []\n    let count = 0\n    if (checkedIssues.length !== 0) {\n      checkedIssues.map(c =>\n        c.status === true ? selected.push(c.id) && count++ : null\n      )\n    }\n    if (selected.length > 0 && count > 0) {\n      isShow('visible', false)\n    } else {\n      isShow('hidden', false)\n    }\n  }, [checkedIssues])\n\n  useEffect(() => {\n    if (deleteSelections === true) {\n      let selected = []\n      checkedIssues.map(c => (c.status === true ? selected.push(c.id) : null))\n      deleteSelectedIssues(selected).then(i => {\n        setIssues(i.data.content)\n      })\n\n      isShow('hidden', true)\n    }\n  }, [deleteSelections])\n\n  useEffect(() => {\n    if (issues !== undefined || issues.length !== 0) {\n      getIssues().then(i => getPages(i.data.totalElements))\n    }\n  }, [])\n\n  function getStatus (id) {\n    let status\n    let tempArray = []\n    if (issues.length !== 0) {\n      if (checkedIssues.length === 0) {\n        issues.map(i => tempArray.push({ id: i.id, status: false }))\n        setCheck(tempArray)\n        status = false\n      } else {\n        checkedIssues.map(i => (i.id === id ? (status = i.status) : null))\n      }\n    }\n    return status\n  }\n  function handleCheckBoxes (event, id) {\n    let tempArray = []\n    checkedIssues.map(i => tempArray.push(i))\n    tempArray.map((i, index) =>\n      i.id === id ? (tempArray[index].status = event.target.checked) : null\n    )\n    setCheck(tempArray)\n  }\n\n  async function deleteIssueOne (id) {\n    await deleteIssue(id)\n    getIssues().then(i => {\n      setIssues(i.data.content)\n    })\n  }\n  return (\n    <Table striped bordered hover variant='dark'>\n      <tbody className='container'>\n        {issues &&\n          issues.map(issue => {\n            return (\n              <tr className='row' key={issue.id}>\n                <td className='col-12'>\n                  <div className='check-issue-container col-1'>\n                    <Form className='check-issue'>\n                      <FormCheck\n                        type='checkbox'\n                        checked={getStatus(issue.id) || false}\n                        onChange={e => {\n                          handleCheckBoxes(e, issue.id)\n                        }}\n                      ></FormCheck>\n                    </Form>\n                  </div>\n                  <div className='issue-body col-6'>\n                    <h4>\n                      {issue.title}\n                      <div className='edit-delete'>\n                        <Button\n                          variant='info'\n                          href={'/issues/detail/' + issue.id}\n                        >\n                          <i className='edit-icon'></i>\n                        </Button>\n                        <Button\n                          variant='danger'\n                          onClick={() => deleteIssueOne(issue.id)}\n                        >\n                          <i className='delete-icon'></i>\n                        </Button>\n                      </div>\n                    </h4>\n                    <p className='description-text'>{issue.description}</p>\n                  </div>\n                  <div className='offset-1 col-2 times'>\n                    <div className='date-container'>\n                      created:{' '}\n                      <p className='date'>\n                        {new Date(issue.createTime).toLocaleDateString(\n                          'en-US',\n                          dateOptions\n                        )}\n                      </p>\n                      <p className='hour'>\n                        {new Date(issue.createTime).toLocaleTimeString(\n                          [],\n                          timeOptions\n                        )}\n                      </p>\n                    </div>\n                    <div className='date-container'>\n                      updated:{' '}\n                      <p className='date'>\n                        {new Date(issue.updateTime).toLocaleDateString(\n                          'en-US',\n                          dateOptions\n                        )}\n                      </p>\n                      <p className='hour'>\n                        {new Date(issue.updateTime).toLocaleTimeString(\n                          [],\n                          timeOptions\n                        )}\n                      </p>\n                    </div>\n                  </div>\n                  <div className='labels-container col-2'>\n                    <div className='labels'>\n                      {issue.labels.map(label => {\n                        return (\n                          <Badge\n                            pill\n                            style={{ backgroundColor: label.labelColor }}\n                            key={label.id}\n                          >\n                            #{label.labelName}\n                          </Badge>\n                        )\n                      })}\n                    </div>\n                  </div>\n                </td>\n              </tr>\n            )\n          })}\n      </tbody>\n    </Table>\n  )\n}\n","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/getFilteredIssues.js",[],["135","136"],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/getSortedIssues.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/deleteSelectedIssues.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/component/issue/CreateIssue.js",["137"],"import React, { useState, useEffect } from 'react'\nimport { Button, Form, Row, Dropdown, Badge, InputGroup } from 'react-bootstrap'\nimport { getLabels } from '../../service/getLabels'\nimport { createIssue } from '../../service/createIssue'\nimport './scss/create-issue.scss'\n\nexport default function CreateIssue (props) {\n  let [labels, setLabels] = useState([])\n  let [filterOfLabel, setLabelFilter] = useState('')\n  let [filteredLabels, setFilteredLabels] = useState([])\n  let [selectedLabels, setSelectedLabels] = useState([])\n  let [title, setTitle] = useState('')\n  let [description, setDescription] = useState('')\n\n  const handleLabelSelection = (labelName, labelColor) => {\n    let tempArray = selectedLabels || [] //if selectedLabels is undefined\n    let allLabels = filteredLabels\n    if (tempArray.length === 0) {\n      allLabels.map(l =>\n        l.labelName === labelName\n          ? tempArray.push({ labelName: labelName, labelColor: labelColor })\n          : null\n      )\n    } else {\n      let founded = false\n      tempArray.map(l => (labelName === l.labelName ? (founded = true) : null))\n      founded\n        ? alert('Label is already added')\n        : tempArray.push({ labelName: labelName, labelColor: labelColor })\n    }\n    setSelectedLabels(tempArray)\n  }\n  const removeSelectedLabel = labelName => {\n    let tempArray = []\n    selectedLabels.map(a =>\n      a.labelName !== labelName ? tempArray.push(a) : null\n    )\n\n    setSelectedLabels(tempArray)\n  }\n\n  const handleTitle = event => {\n    setTitle(event.target.value)\n  }\n  const handleDescription = event => {\n    setDescription(event.target.value)\n  }\n  const addIssue = async () => {\n    let labelIds = []\n    selectedLabels.map(sl =>\n      labels.forEach(l =>\n        sl.labelName === l.labelName ? labelIds.push({ id: l.id }) : null\n      )\n    )\n    console.log(labelIds)\n    await createIssue(title, description, labelIds)\n    props.history.push('/issues')\n  }\n\n  useEffect(() => {\n    let updatedLabels = []\n    if (labels.length === 0) {\n      getLabels().then(l => {\n        setFilteredLabels(l.data)\n        setLabels(l.data)\n      })\n    } else {\n      labels.map(fl =>\n        fl.labelName.search(filterOfLabel) !== -1\n          ? updatedLabels.push(fl)\n          : null\n      )\n      setFilteredLabels(updatedLabels)\n    }\n  }, [filterOfLabel])\n\n  return (\n    <div className='create-container container-fluid'>\n      <Row>\n        <div className='offset-1 col-7 issue-container'>\n          <Form>\n            <Form.Group>\n              <Form.Label className='title-label'>Title : </Form.Label>\n              <Form.Control\n                type='text'\n                className='add-title'\n                onChange={e => handleTitle(e)}\n                value={title}\n              ></Form.Control>\n              <Form.Label className='description-label'>\n                Description :{' '}\n              </Form.Label>\n              <textarea\n                className='add-description'\n                onChange={e => handleDescription(e)}\n                value={description}\n              ></textarea>\n              <Button\n                className='submit-issue'\n                type='button'\n                variant='outline-success'\n                onClick={() => addIssue()}\n                block\n              >\n                Create Issue\n              </Button>\n            </Form.Group>\n          </Form>\n        </div>\n        <div className='col-3 issue-props-container'>\n          <Dropdown className='label-dropdown'>\n            <Dropdown.Toggle id='dropdown-label' variant='outline-info' block>\n              Labels\n            </Dropdown.Toggle>\n            <div className='selected-labels-container'>\n              {selectedLabels &&\n                selectedLabels.map((labels, i) => {\n                  return (\n                    <Badge\n                      className='added-labels'\n                      key={i++}\n                      style={{ background: labels.labelColor }}\n                      onClick={() => removeSelectedLabel(labels.labelName)}\n                    >\n                      {labels.labelName}\n                    </Badge>\n                  )\n                })}\n            </div>\n            <Dropdown.Menu className='label-dropdown-container'>\n              <Form>\n                <InputGroup>\n                  <Form.Control\n                    type='text'\n                    placeholder='type something..'\n                    value={filterOfLabel}\n                    onChange={e => setLabelFilter(e.target.value)}\n                  ></Form.Control>\n                  <InputGroup.Append>\n                    <Button\n                      onClick={() => {\n                        setLabelFilter('')\n                      }}\n                      variant='outline-secondary'\n                    >\n                      <i className='clean-icon'></i>\n                    </Button>\n                  </InputGroup.Append>\n                </InputGroup>\n              </Form>\n              {filteredLabels.map(label => {\n                return (\n                  <Dropdown.Item\n                    onSelect={() => {\n                      handleLabelSelection(label.labelName, label.labelColor)\n                    }}\n                    href=''\n                    key={label.id}\n                    onClick={() => {\n                      setLabelFilter(label.labelName)\n                    }}\n                  >\n                    <Badge style={{ backgroundColor: label.labelColor }}>\n                      {label.labelName[0].toUpperCase()}\n                    </Badge>\n                    {label.labelName}\n                  </Dropdown.Item>\n                )\n              })}\n            </Dropdown.Menu>\n          </Dropdown>\n        </div>\n      </Row>\n    </div>\n  )\n}\n","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/component/issue/IssueDetail.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/addComment.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/deleteComment.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/custom/httpCustomValues.js",[],["138","139"],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/component/login/Login.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/history.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/component/issue/IssueWorkflow.js",["140"],"import React, { useEffect, useState } from 'react'\nimport { Form, InputGroup, Row, Button } from 'react-bootstrap'\nimport { getIssues } from '../../service/getIssues'\nimport { getStatus } from '../../service/getStates'\nimport { changeState } from '../../service/changeState'\nimport { addColumn } from '../../service/addColumn'\nimport IssueWorkflowCard from '../../model/issue/IssueWorkflowCard'\n\nimport './scss/issue-workflow.scss'\n\nexport default function IssueWorkflow (props) {\n  let [issues, setIssues] = useState([])\n  let [status, setStatus] = useState([])\n  let [show, setShow] = useState('none')\n  let [stateName, setStateName] = useState('')\n\n  useEffect(() => {\n    if (issues.length === 0) {\n      getIssues(1, 10).then(i => setIssues(i.data.content))\n      getStatus().then(s => setStatus(s.data))\n    }\n  }, [])\n\n  const drop = async (e, stateId) => {\n    const card_id = localStorage.getItem('dragId')\n\n    const card = document.getElementById(card_id)\n    card.style.display = 'block'\n    e.target.appendChild(card)\n    await changeState(card_id, stateId)\n    getIssues(1, 10).then(i => setIssues(i.data.content))\n  }\n\n  const dragOver = e => {\n    e.preventDefault()\n  }\n\n  const addNewColumn = async () => {\n    if (stateName !== '') {\n      setStateName('')\n      setShow('none')\n      await addColumn(stateName)\n      await getStatus().then(s => setStatus(s.data))\n    }\n  }\n\n  const isVisible = () => {\n    setShow('')\n  }\n\n  const handleStateName = e => {\n    setStateName(e.target.value)\n  }\n  return (\n    <div className='container-fluid workflow-body'>\n      <Row>\n        <div className='flow-container'>\n          {status &&\n            status.sort(function (a, b) {\n              return a.id - b.id\n            }) &&\n            status.map(s => {\n              return (\n                <div\n                  key={s.id}\n                  className='flow-item'\n                  onDrop={e => drop(e, s.id)}\n                  onDragOver={dragOver}\n                >\n                  <div className='flow-header'>{s.name}</div>\n                  <div className='flow-body'>\n                    {issues &&\n                      issues.map(i =>\n                        i.state.stateName === s.name ? (\n                          <IssueWorkflowCard\n                            key={i.id}\n                            issueTitle={i.title}\n                            id={i.id}\n                          />\n                        ) : null\n                      )}\n                  </div>\n                </div>\n              )\n            })}\n          <div className='empty-container'>\n            <InputGroup className='state-form' style={{ display: show }}>\n              <Form.Control\n                id='inlineFormInputGroupUsername'\n                placeholder='Column Name'\n                value={stateName}\n                onChange={e => handleStateName(e)}\n              />\n              <InputGroup.Append>\n                <Button variant='outline-success' onClick={addNewColumn}>\n                  +\n                </Button>\n              </InputGroup.Append>\n            </InputGroup>\n            <span className='empty-container-text' onClick={isVisible}>\n              Add New Column\n            </span>\n          </div>\n        </div>\n      </Row>\n    </div>\n  )\n}\n","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/getStates.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/model/issue/IssueWorkflowCard.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/changeState.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/addColumn.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/getAssignedIssues.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/getMyIssues.js",[],{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","severity":1,"message":"146","line":45,"column":6,"nodeType":"147","endLine":45,"endColumn":21,"suggestions":"148"},{"ruleId":"149","severity":1,"message":"150","line":4,"column":24,"nodeType":"151","messageId":"152","endLine":4,"endColumn":25},{"ruleId":"145","severity":1,"message":"153","line":82,"column":6,"nodeType":"147","endLine":82,"endColumn":18,"suggestions":"154"},{"ruleId":"145","severity":1,"message":"155","line":90,"column":6,"nodeType":"147","endLine":90,"endColumn":19,"suggestions":"156"},{"ruleId":"145","severity":1,"message":"157","line":105,"column":6,"nodeType":"147","endLine":105,"endColumn":21,"suggestions":"158"},{"ruleId":"145","severity":1,"message":"159","line":117,"column":6,"nodeType":"147","endLine":117,"endColumn":24,"suggestions":"160"},{"ruleId":"145","severity":1,"message":"161","line":123,"column":6,"nodeType":"147","endLine":123,"endColumn":8,"suggestions":"162"},{"ruleId":"141","replacedBy":"163"},{"ruleId":"143","replacedBy":"164"},{"ruleId":"145","severity":1,"message":"146","line":75,"column":6,"nodeType":"147","endLine":75,"endColumn":21,"suggestions":"165"},{"ruleId":"141","replacedBy":"166"},{"ruleId":"143","replacedBy":"167"},{"ruleId":"145","severity":1,"message":"168","line":22,"column":6,"nodeType":"147","endLine":22,"endColumn":8,"suggestions":"169"},"no-native-reassign",["170"],"no-negated-in-lhs",["171"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'labels'. Either include it or remove the dependency array.","ArrayExpression",["172"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useEffect has a missing dependency: 'getPages'. Either include it or remove the dependency array.",["173"],"React Hook useEffect has a missing dependency: 'issues'. Either include it or remove the dependency array.",["174"],"React Hook useEffect has a missing dependency: 'isShow'. Either include it or remove the dependency array.",["175"],"React Hook useEffect has missing dependencies: 'checkedIssues' and 'isShow'. Either include them or remove the dependency array.",["176"],"React Hook useEffect has missing dependencies: 'getPages' and 'issues'. Either include them or remove the dependency array.",["177"],["170"],["171"],["178"],["170"],["171"],"React Hook useEffect has a missing dependency: 'issues.length'. Either include it or remove the dependency array.",["179"],"no-global-assign","no-unsafe-negation",{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},{"desc":"180","fix":"192"},{"desc":"193","fix":"194"},"Update the dependencies array to be: [filterOfLabel, labels]",{"range":"195","text":"196"},"Update the dependencies array to be: [getPages, sortParams]",{"range":"197","text":"198"},"Update the dependencies array to be: [checkStatus, issues]",{"range":"199","text":"200"},"Update the dependencies array to be: [checkedIssues, isShow]",{"range":"201","text":"202"},"Update the dependencies array to be: [checkedIssues, deleteSelections, isShow]",{"range":"203","text":"204"},"Update the dependencies array to be: [getPages, issues]",{"range":"205","text":"206"},{"range":"207","text":"196"},"Update the dependencies array to be: [issues.length]",{"range":"208","text":"209"},[1235,1250],"[filterOfLabel, labels]",[2273,2285],"[getPages, sortParams]",[2472,2485],"[checkStatus, issues]",[2851,2866],"[checkedIssues, isShow]",[3162,3180],"[checkedIssues, deleteSelections, isShow]",[3329,3331],"[getPages, issues]",[2317,2332],[821,823],"[issues.length]"]