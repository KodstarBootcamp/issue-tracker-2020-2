[{"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/index.js":"1","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/App.js":"2","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/reportWebVitals.js":"3","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/component/issue/Issues.js":"4","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/createIssue.js":"5","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/getIssues.js":"6","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/getIssue.js":"7","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/deleteIssue.js":"8","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/editIssue.js":"9","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/component/nav/Navigation.js":"10","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/getLabels.js":"11","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/model/issue/Issue.js":"12","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/getFilteredIssues.js":"13","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/getSortedIssues.js":"14","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/deleteSelectedIssues.js":"15","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/component/issue/CreateIssue.js":"16","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/component/issue/IssueDetail.js":"17","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/addComment.js":"18","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/deleteComment.js":"19","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/custom/httpCustomValues.js":"20"},{"size":1261,"mtime":1610157556897,"results":"21","hashOfConfig":"22"},{"size":220,"mtime":1609723352832,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":1609271935708,"results":"24","hashOfConfig":"22"},{"size":6246,"mtime":1610239113244,"results":"25","hashOfConfig":"22"},{"size":614,"mtime":1610237082644,"results":"26","hashOfConfig":"22"},{"size":447,"mtime":1610237258948,"results":"27","hashOfConfig":"22"},{"size":456,"mtime":1610237267372,"results":"28","hashOfConfig":"22"},{"size":274,"mtime":1609922849850,"results":"29","hashOfConfig":"22"},{"size":577,"mtime":1610278974003,"results":"30","hashOfConfig":"22"},{"size":637,"mtime":1610239033044,"results":"31","hashOfConfig":"22"},{"size":452,"mtime":1610237308476,"results":"32","hashOfConfig":"22"},{"size":5758,"mtime":1610239801516,"results":"33","hashOfConfig":"22"},{"size":1368,"mtime":1610237268712,"results":"34","hashOfConfig":"22"},{"size":1109,"mtime":1610237306460,"results":"35","hashOfConfig":"22"},{"size":535,"mtime":1610237174392,"results":"36","hashOfConfig":"22"},{"size":5616,"mtime":1610240153668,"results":"37","hashOfConfig":"22"},{"size":6757,"mtime":1610283198924,"results":"38","hashOfConfig":"22"},{"size":376,"mtime":1610276659435,"results":"39","hashOfConfig":"22"},{"size":360,"mtime":1610283142876,"results":"40","hashOfConfig":"22"},{"size":312,"mtime":1610276453291,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"r8iyi5",{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"44"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/index.js",[],["87","88"],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/App.js",["89"],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/reportWebVitals.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/component/issue/Issues.js",["90"],"import React, { useEffect, useState } from 'react'\nimport {\n  Container,\n  Form,\n  Navbar,\n  Nav,\n  Dropdown,\n  Badge,\n  InputGroup,\n  Button\n} from 'react-bootstrap'\nimport Issue from '../../model/issue/Issue'\nimport { getLabels } from '../../service/getLabels'\n\nimport './scss/issues.scss'\n\nexport default function Issues () {\n  // var _ = require('lodash')\n  let [labels, setItem] = useState([])\n  let [filteredLabels, setFilteredLabels] = useState([])\n  let [filterOfLabel, setLabelFilter] = useState('')\n  let [filterIssue, setIssueFilter] = useState('')\n  let [check, setCheck] = useState(false)\n  let [sort, setSort] = useState('')\n  let [showDeleteButton, setVisibility] = useState('hidden')\n  let [deleteSelected, setDelete] = useState(false)\n\n  useEffect(() => {\n    getLabels().then(labels => {\n      setItem(labels.data)\n      setFilteredLabels(labels.data)\n    })\n  }, [])\n\n  useEffect(() => {\n    let updatedLabels = []\n    labels.forEach(element =>\n      element.labelName.search(filterOfLabel) !== -1\n        ? updatedLabels.push(element)\n        : null\n    )\n    setFilteredLabels([...updatedLabels])\n  }, [filterOfLabel])\n\n  const handleFilterIssue = e => {\n    setIssueFilter(e.target.value)\n  }\n\n  const handleLabelSelection = e => {\n    setIssueFilter('label:' + e)\n  }\n\n  const handleCheckBox = e => {\n    setCheck(e.target.checked)\n  }\n  const askDelete = (willShow, isDeleted) => {\n    setVisibility(willShow)\n  }\n\n  const sendDelete = () => {\n    if (showDeleteButton === 'visible') {\n      setDelete(true)\n    }\n  }\n\n  const sortSelections = [\n    'Newest',\n    'Oldest',\n    'Recently Updated',\n    'Least Recently Updated'\n  ]\n\n  return (\n    <div className='issues'>\n      <Container className='issue-container'>\n        <Navbar collapseOnSelect expand='lg' bg='dark' variant='dark'>\n          <Form>\n            <Form.Check\n              checked={check}\n              onChange={e => {\n                handleCheckBox(e)\n              }}\n            ></Form.Check>\n            <button\n              type='button'\n              className='delete-all'\n              style={{ visibility: showDeleteButton }}\n              onClick={() => sendDelete()}\n            >\n              <i className='delete-all-icon'></i>\n              <span className='delete-all-text'>{'(delete all)'}</span>\n            </button>\n            <div className='search-container'>\n              <Form.Control\n                className='search'\n                placeholder='title(default):  description:  label:'\n                onChange={handleFilterIssue.bind(this)}\n                value={filterIssue}\n              ></Form.Control>\n            </div>\n          </Form>\n          <Navbar.Toggle aria-controls='responsive-navbar-nav' />\n          <Navbar.Collapse id='responsive-navbar-nav'>\n            <Nav className='mr-auto'></Nav>\n            <Nav>\n              <Dropdown className='sort-dropdown'>\n                <Dropdown.Toggle id='dropdown-sort' variant='outline-info'>\n                  Sort\n                </Dropdown.Toggle>\n                <Dropdown.Menu className='sort-dropdown-container'>\n                  {sortSelections.map((s, i) => (\n                    <Dropdown.Item\n                      key={i}\n                      onClick={() => {\n                        setSort(s)\n                      }}\n                    >\n                      {s}\n                    </Dropdown.Item>\n                  ))}\n                </Dropdown.Menu>\n              </Dropdown>\n              <Dropdown className='label-dropdown'>\n                <Dropdown.Toggle id='dropdown-label' variant='outline-info'>\n                  Label\n                </Dropdown.Toggle>\n                <Dropdown.Menu className='label-dropdown-container'>\n                  <Form>\n                    <InputGroup>\n                      <Form.Control\n                        type='text'\n                        placeholder='type something..'\n                        value={filterOfLabel}\n                        onChange={e => setLabelFilter(e.target.value)}\n                      ></Form.Control>\n                      <InputGroup.Append>\n                        <Button\n                          onClick={() => {\n                            setLabelFilter('')\n                          }}\n                          variant='outline-secondary'\n                        >\n                          <i className='clean-icon'></i>\n                        </Button>\n                      </InputGroup.Append>\n                    </InputGroup>\n                  </Form>\n                  <Dropdown.Item\n                    onSelect={() => {\n                      handleLabelSelection('')\n                    }}\n                    onClick={() => {\n                      setLabelFilter('unlabeled')\n                    }}\n                  >\n                    unlabeled\n                  </Dropdown.Item>\n                  {filteredLabels.map(label => {\n                    return (\n                      <Dropdown.Item\n                        onSelect={() => {\n                          handleLabelSelection(label.labelName)\n                        }}\n                        href=''\n                        key={label.id}\n                        onClick={() => {\n                          setLabelFilter(label.labelName)\n                        }}\n                      >\n                        <Badge style={{ backgroundColor: label.labelColor }}>\n                          {label.labelName[0].toUpperCase()}\n                        </Badge>\n                        {label.labelName}\n                      </Dropdown.Item>\n                    )\n                  })}\n                </Dropdown.Menu>\n              </Dropdown>\n              <Button\n                href='/issues/new'\n                type='button'\n                className='add-issue-btn'\n                variant='outline-success'\n              >\n                Add Issue\n              </Button>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n        <Issue\n          issueFilter={filterIssue}\n          checkStatus={check}\n          sortParams={sort}\n          isShow={askDelete}\n          deleteSelections={deleteSelected}\n        />\n      </Container>\n    </div>\n  )\n}\n","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/createIssue.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/getIssues.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/getIssue.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/deleteIssue.js",[],["91","92"],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/editIssue.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/component/nav/Navigation.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/getLabels.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/model/issue/Issue.js",["93","94","95"],"import React, { useState, useEffect } from 'react'\nimport { Badge, Button, Form, FormCheck, Table } from 'react-bootstrap'\nimport { getFilteredIssues } from '../../service/getFilteredIssues'\nimport { getSortedIssues } from '../../service/getSortedIssues'\nimport { deleteSelectedIssues } from '../../service/deleteSelectedIssues'\nimport './scss/issue.scss'\n\nexport default function Issue (props) {\n  let [issues, setIssues] = useState([])\n  let [checkedIssues, setCheck] = useState([])\n\n  let { issueFilter, checkStatus, sortParams, isShow, deleteSelections } = props\n\n  const dateOptions = {\n    day: '2-digit',\n    year: '2-digit',\n    month: 'short'\n  }\n  const timeOptions = {\n    hour: '2-digit',\n    minute: '2-digit'\n  }\n\n  useEffect(() => {\n    getFilteredIssues(issueFilter).then(issue => {\n      setIssues(issue.data)\n    })\n  }, [issueFilter])\n\n  useEffect(() => {\n    if (sortParams !== '') {\n      getSortedIssues(sortParams).then(issue => {\n        setIssues(issue.data)\n      })\n    }\n  }, [sortParams])\n\n  useEffect(() => {\n    let tempArray = []\n    if (issues.length !== 0) {\n      issues.map(i => tempArray.push({ id: i.id, status: checkStatus }))\n      setCheck(tempArray)\n    }\n  }, [checkStatus]) //after select all changed\n\n  useEffect(() => {\n    let selected = []\n    let count = 0\n    if (checkedIssues.length !== 0) {\n      checkedIssues.map(c =>\n        c.status === true ? selected.push(c.id) && count++ : null\n      )\n    }\n    if (selected.length > 0 && count > 0) {\n      isShow('visible', false)\n    } else {\n      isShow('hidden', false)\n    }\n  }, [checkedIssues])\n\n  useEffect(() => {\n    if (deleteSelections === true) {\n      let selected = []\n      checkedIssues.map(c => (c.status === true ? selected.push(c.id) : null))\n      deleteSelectedIssues(selected).then(i => {\n        setIssues(i.data)\n      })\n\n      isShow('hidden', true)\n    }\n  }, [deleteSelections])\n\n  function getStatus (id) {\n    let status\n    let tempArray = []\n    if (issues.length !== 0) {\n      if (checkedIssues.length === 0) {\n        issues.map(i => tempArray.push({ id: i.id, status: false }))\n        setCheck(tempArray)\n        status = false\n      } else {\n        checkedIssues.map(i => (i.id === id ? (status = i.status) : null))\n      }\n    }\n    return status\n  }\n  function handleCheckBoxes (event, id) {\n    let tempArray = []\n    checkedIssues.map(i => tempArray.push(i))\n    tempArray.map((i, index) =>\n      i.id === id ? (tempArray[index].status = event.target.checked) : null\n    )\n    setCheck(tempArray)\n  }\n\n  return (\n    <Table striped bordered hover variant='dark'>\n      <tbody className='container'>\n        {issues.map(issue => {\n          return (\n            <tr className='row' key={issue.id}>\n              <td className='col-12'>\n                <div className='check-issue-container col-1'>\n                  <Form className='check-issue'>\n                    <FormCheck\n                      type='checkbox'\n                      checked={getStatus(issue.id) || false}\n                      onChange={e => {\n                        handleCheckBoxes(e, issue.id)\n                      }}\n                    ></FormCheck>\n                  </Form>\n                </div>\n                <div className='issue-body col-6'>\n                  <h4>\n                    {issue.title}\n                    <div className='edit-delete'>\n                      <Button\n                        variant='info'\n                        href={'/issues/detail/' + issue.id}\n                      >\n                        <i className='edit-icon'></i>\n                      </Button>\n                      <Button variant='danger'>\n                        <i className='delete-icon'></i>\n                      </Button>\n                    </div>\n                  </h4>\n                  <p className='description-text'>{issue.description}</p>\n                </div>\n                <div className='offset-1 col-2 times'>\n                  <div className='date-container'>\n                    created:{' '}\n                    <p className='date'>\n                      {new Date(issue.createTime).toLocaleDateString(\n                        'en-US',\n                        dateOptions\n                      )}\n                    </p>\n                    <p className='hour'>\n                      {new Date(issue.createTime).toLocaleTimeString(\n                        [],\n                        timeOptions\n                      )}\n                    </p>\n                  </div>\n                  <div className='date-container'>\n                    updated:{' '}\n                    <p className='date'>\n                      {new Date(issue.updateTime).toLocaleDateString(\n                        'en-US',\n                        dateOptions\n                      )}\n                    </p>\n                    <p className='hour'>\n                      {new Date(issue.updateTime).toLocaleTimeString(\n                        [],\n                        timeOptions\n                      )}\n                    </p>\n                  </div>\n                </div>\n                <div className='labels-container col-2'>\n                  <div className='labels'>\n                    {issue.labels.map(label => {\n                      return (\n                        <Badge\n                          pill\n                          style={{ backgroundColor: label.labelColor }}\n                          key={label.id}\n                        >\n                          #{label.labelName}\n                        </Badge>\n                      )\n                    })}\n                  </div>\n                </div>\n              </td>\n            </tr>\n          )\n        })}\n      </tbody>\n    </Table>\n  )\n}\n","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/getFilteredIssues.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/getSortedIssues.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/deleteSelectedIssues.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/component/issue/CreateIssue.js",["96"],"import React, { useState, useEffect } from 'react'\nimport { Button, Form, Row, Dropdown, Badge, InputGroup } from 'react-bootstrap'\nimport { getLabels } from '../../service/getLabels'\nimport { createIssue } from '../../service/createIssue'\nimport './scss/create-issue.scss'\n\nexport default function CreateIssue (props) {\n  let [labels, setLabels] = useState([])\n  let [filterOfLabel, setLabelFilter] = useState('')\n  let [filteredLabels, setFilteredLabels] = useState([])\n  let [selectedLabels, setSelectedLabels] = useState([])\n  let [title, setTitle] = useState('')\n  let [description, setDescription] = useState('')\n\n  const handleLabelSelection = (labelName, labelColor) => {\n    let tempArray = selectedLabels || [] //if selectedLabels is undefined\n    let allLabels = filteredLabels\n    if (tempArray.length === 0) {\n      allLabels.map(l =>\n        l.labelName === labelName\n          ? tempArray.push({ labelName: labelName, labelColor: labelColor })\n          : null\n      )\n    } else {\n      let founded = false\n      tempArray.map(l => (labelName === l.labelName ? (founded = true) : null))\n      founded\n        ? alert('Label is already added')\n        : tempArray.push({ labelName: labelName, labelColor: labelColor })\n    }\n    setSelectedLabels(tempArray)\n  }\n  const removeSelectedLabel = labelName => {\n    let tempArray = []\n    selectedLabels.map(a =>\n      a.labelName !== labelName ? tempArray.push(a) : null\n    )\n\n    setSelectedLabels(tempArray)\n  }\n\n  const handleTitle = event => {\n    setTitle(event.target.value)\n  }\n  const handleDescription = event => {\n    setDescription(event.target.value)\n  }\n  const addIssue = () => {\n    createIssue(title, description, selectedLabels)\n    props.history.push('/issues')\n  }\n\n  useEffect(() => {\n    let updatedLabels = []\n    if (labels.length === 0) {\n      getLabels().then(l => {\n        setFilteredLabels(l.data)\n        setLabels(l.data)\n      })\n    } else {\n      labels.map(fl =>\n        fl.labelName.search(filterOfLabel) !== -1\n          ? updatedLabels.push(fl)\n          : null\n      )\n      setFilteredLabels(updatedLabels)\n    }\n  }, [filterOfLabel])\n\n  return (\n    <div className='create-container container-fluid'>\n      <Row>\n        <div className='offset-1 col-7 issue-container'>\n          <Form>\n            <Form.Group>\n              <Form.Label className='title-label'>Title : </Form.Label>\n              <Form.Control\n                type='text'\n                className='add-title'\n                onChange={e => handleTitle(e)}\n                value={title}\n              ></Form.Control>\n              <Form.Label className='description-label'>\n                Description :{' '}\n              </Form.Label>\n              <textarea\n                className='add-description'\n                onChange={e => handleDescription(e)}\n                value={description}\n              ></textarea>\n              <Button\n                className='submit-issue'\n                type='button'\n                variant='outline-success'\n                onClick={() => addIssue()}\n                block\n              >\n                Create Issue\n              </Button>\n            </Form.Group>\n          </Form>\n        </div>\n        <div className='col-3 issue-props-container'>\n          <Dropdown className='label-dropdown'>\n            <Dropdown.Toggle id='dropdown-label' variant='outline-info' block>\n              Labels\n            </Dropdown.Toggle>\n            <div className='selected-labels-container'>\n              {selectedLabels &&\n                selectedLabels.map((labels, i) => {\n                  return (\n                    <Badge\n                      className='added-labels'\n                      key={i++}\n                      style={{ background: labels.labelColor }}\n                      onClick={() => removeSelectedLabel(labels.labelName)}\n                    >\n                      {labels.labelName}\n                    </Badge>\n                  )\n                })}\n            </div>\n            <Dropdown.Menu className='label-dropdown-container'>\n              <Form>\n                <InputGroup>\n                  <Form.Control\n                    type='text'\n                    placeholder='type something..'\n                    value={filterOfLabel}\n                    onChange={e => setLabelFilter(e.target.value)}\n                  ></Form.Control>\n                  <InputGroup.Append>\n                    <Button\n                      onClick={() => {\n                        setLabelFilter('')\n                      }}\n                      variant='outline-secondary'\n                    >\n                      <i className='clean-icon'></i>\n                    </Button>\n                  </InputGroup.Append>\n                </InputGroup>\n              </Form>\n              {filteredLabels.map(label => {\n                return (\n                  <Dropdown.Item\n                    onSelect={() => {\n                      handleLabelSelection(label.labelName, label.labelColor)\n                    }}\n                    href=''\n                    key={label.id}\n                    onClick={() => {\n                      setLabelFilter(label.labelName)\n                    }}\n                  >\n                    <Badge style={{ backgroundColor: label.labelColor }}>\n                      {label.labelName[0].toUpperCase()}\n                    </Badge>\n                    {label.labelName}\n                  </Dropdown.Item>\n                )\n              })}\n            </Dropdown.Menu>\n          </Dropdown>\n        </div>\n      </Row>\n    </div>\n  )\n}\n","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/component/issue/IssueDetail.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/addComment.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/deleteComment.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/custom/httpCustomValues.js",[],{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":2,"column":8,"nodeType":"103","messageId":"104","endLine":2,"endColumn":14},{"ruleId":"105","severity":1,"message":"106","line":43,"column":6,"nodeType":"107","endLine":43,"endColumn":21,"suggestions":"108"},{"ruleId":"97","replacedBy":"109"},{"ruleId":"99","replacedBy":"110"},{"ruleId":"105","severity":1,"message":"111","line":44,"column":6,"nodeType":"107","endLine":44,"endColumn":19,"suggestions":"112"},{"ruleId":"105","severity":1,"message":"113","line":59,"column":6,"nodeType":"107","endLine":59,"endColumn":21,"suggestions":"114"},{"ruleId":"105","severity":1,"message":"115","line":71,"column":6,"nodeType":"107","endLine":71,"endColumn":24,"suggestions":"116"},{"ruleId":"105","severity":1,"message":"106","line":68,"column":6,"nodeType":"107","endLine":68,"endColumn":21,"suggestions":"117"},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"no-unused-vars","'Issues' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'labels'. Either include it or remove the dependency array.","ArrayExpression",["120"],["118"],["119"],"React Hook useEffect has a missing dependency: 'issues'. Either include it or remove the dependency array.",["121"],"React Hook useEffect has a missing dependency: 'isShow'. Either include it or remove the dependency array.",["122"],"React Hook useEffect has missing dependencies: 'checkedIssues' and 'isShow'. Either include them or remove the dependency array.",["123"],["124"],"no-global-assign","no-unsafe-negation",{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},{"desc":"125","fix":"133"},"Update the dependencies array to be: [filterOfLabel, labels]",{"range":"134","text":"135"},"Update the dependencies array to be: [checkStatus, issues]",{"range":"136","text":"137"},"Update the dependencies array to be: [checkedIssues, isShow]",{"range":"138","text":"139"},"Update the dependencies array to be: [checkedIssues, deleteSelections, isShow]",{"range":"140","text":"141"},{"range":"142","text":"135"},[1123,1138],"[filterOfLabel, labels]",[1203,1216],"[checkStatus, issues]",[1582,1597],"[checkedIssues, isShow]",[1885,1903],"[checkedIssues, deleteSelections, isShow]",[2120,2135]]