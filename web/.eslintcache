[{"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/index.js":"1","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/App.js":"2","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/reportWebVitals.js":"3","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/component/issue/Issues.js":"4","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/createIssue.js":"5","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/getIssues.js":"6","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/getIssue.js":"7","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/deleteIssue.js":"8","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/editIssue.js":"9","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/component/nav/Navigation.js":"10","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/getLabels.js":"11","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/model/issue/Issue.js":"12","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/getFilteredIssues.js":"13","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/getSortedIssues.js":"14","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/deleteSelectedIssues.js":"15","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/component/issue/CreateIssue.js":"16","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/component/issue/IssueDetail.js":"17","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/addComment.js":"18","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/deleteComment.js":"19","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/custom/httpCustomValues.js":"20","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/component/login/Login.js":"21","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/history.js":"22"},{"size":844,"mtime":1610379342048,"results":"23","hashOfConfig":"24"},{"size":1984,"mtime":1610381871512,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":1609271935708,"results":"26","hashOfConfig":"24"},{"size":6237,"mtime":1610285262908,"results":"27","hashOfConfig":"24"},{"size":399,"mtime":1610376982072,"results":"28","hashOfConfig":"24"},{"size":277,"mtime":1610376973008,"results":"29","hashOfConfig":"24"},{"size":274,"mtime":1610376974336,"results":"30","hashOfConfig":"24"},{"size":274,"mtime":1609922849850,"results":"31","hashOfConfig":"24"},{"size":574,"mtime":1610376977376,"results":"32","hashOfConfig":"24"},{"size":796,"mtime":1610301697288,"results":"33","hashOfConfig":"24"},{"size":282,"mtime":1610376971192,"results":"34","hashOfConfig":"24"},{"size":6058,"mtime":1610316292540,"results":"35","hashOfConfig":"24"},{"size":706,"mtime":1610376975600,"results":"36","hashOfConfig":"24"},{"size":939,"mtime":1610376968000,"results":"37","hashOfConfig":"24"},{"size":365,"mtime":1610376979252,"results":"38","hashOfConfig":"24"},{"size":5616,"mtime":1610240153668,"results":"39","hashOfConfig":"24"},{"size":6751,"mtime":1610283561560,"results":"40","hashOfConfig":"24"},{"size":373,"mtime":1610376984072,"results":"41","hashOfConfig":"24"},{"size":357,"mtime":1610376876272,"results":"42","hashOfConfig":"24"},{"size":190,"mtime":1610369868292,"results":"43","hashOfConfig":"24"},{"size":2095,"mtime":1610381769856,"results":"44","hashOfConfig":"24"},{"size":88,"mtime":1610380835484,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"r8iyi5",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"48"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"48"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"48"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"48"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/index.js",[],["107","108"],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/App.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/reportWebVitals.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/component/issue/Issues.js",["109"],"import React, { useEffect, useState } from 'react'\nimport {\n  Container,\n  Form,\n  Navbar,\n  Nav,\n  Dropdown,\n  Badge,\n  InputGroup,\n  Button\n} from 'react-bootstrap'\nimport Issue from '../../model/issue/Issue'\nimport { getLabels } from '../../service/getLabels'\n\nimport './scss/issues.scss'\n\nexport default function Issues () {\n  // var _ = require('lodash')\n  let [labels, setItem] = useState([])\n  let [filteredLabels, setFilteredLabels] = useState([])\n  let [filterOfLabel, setLabelFilter] = useState('')\n  let [filterIssue, setIssueFilter] = useState('')\n  let [check, setCheck] = useState(false)\n  let [sort, setSort] = useState('')\n  let [showDeleteButton, setVisibility] = useState('hidden')\n  let [deleteSelected, setDelete] = useState(false)\n\n  useEffect(() => {\n    getLabels().then(labels => {\n      setItem(labels.data)\n      setFilteredLabels(labels.data)\n    })\n  }, [])\n\n  useEffect(() => {\n    let updatedLabels = []\n    labels.forEach(element =>\n      element.labelName.search(filterOfLabel) !== -1\n        ? updatedLabels.push(element)\n        : null\n    )\n    setFilteredLabels([...updatedLabels])\n  }, [filterOfLabel])\n\n  const handleFilterIssue = e => {\n    setIssueFilter(e.target.value)\n  }\n\n  const handleLabelSelection = e => {\n    setIssueFilter('label:' + e)\n  }\n\n  const handleCheckBox = e => {\n    setCheck(e.target.checked)\n  }\n  const askDelete = (willShow, isDeleted) => {\n    setVisibility(willShow)\n  }\n\n  const sendDelete = () => {\n    if (showDeleteButton === 'visible') {\n      setDelete(true)\n    }\n  }\n\n  const sortSelections = [\n    'Newest',\n    'Oldest',\n    'Recently Updated',\n    'Least Recently Updated'\n  ]\n\n  return (\n    <div className='issues'>\n      <Container className='issue-container'>\n        <Navbar collapseOnSelect expand='lg' bg='dark' variant='dark'>\n          <Form>\n            <Form.Check\n              checked={check}\n              onChange={e => {\n                handleCheckBox(e)\n              }}\n            ></Form.Check>\n            <button\n              type='button'\n              className='delete-all'\n              style={{ visibility: showDeleteButton }}\n              onClick={() => sendDelete()}\n            >\n              <i className='delete-all-icon'></i>\n              <span className='delete-all-text'>{'(delete all)'}</span>\n            </button>\n            <div className='search-container'>\n              <Form.Control\n                className='search'\n                placeholder='title:  description:  label:'\n                onChange={handleFilterIssue.bind(this)}\n                value={filterIssue}\n              ></Form.Control>\n            </div>\n          </Form>\n          <Navbar.Toggle aria-controls='responsive-navbar-nav' />\n          <Navbar.Collapse id='responsive-navbar-nav'>\n            <Nav className='mr-auto'></Nav>\n            <Nav>\n              <Dropdown className='sort-dropdown'>\n                <Dropdown.Toggle id='dropdown-sort' variant='outline-info'>\n                  Sort\n                </Dropdown.Toggle>\n                <Dropdown.Menu className='sort-dropdown-container'>\n                  {sortSelections.map((s, i) => (\n                    <Dropdown.Item\n                      key={i}\n                      onClick={() => {\n                        setSort(s)\n                      }}\n                    >\n                      {s}\n                    </Dropdown.Item>\n                  ))}\n                </Dropdown.Menu>\n              </Dropdown>\n              <Dropdown className='label-dropdown'>\n                <Dropdown.Toggle id='dropdown-label' variant='outline-info'>\n                  Label\n                </Dropdown.Toggle>\n                <Dropdown.Menu className='label-dropdown-container'>\n                  <Form>\n                    <InputGroup>\n                      <Form.Control\n                        type='text'\n                        placeholder='type something..'\n                        value={filterOfLabel}\n                        onChange={e => setLabelFilter(e.target.value)}\n                      ></Form.Control>\n                      <InputGroup.Append>\n                        <Button\n                          onClick={() => {\n                            setLabelFilter('')\n                          }}\n                          variant='outline-secondary'\n                        >\n                          <i className='clean-icon'></i>\n                        </Button>\n                      </InputGroup.Append>\n                    </InputGroup>\n                  </Form>\n                  <Dropdown.Item\n                    onSelect={() => {\n                      handleLabelSelection('')\n                    }}\n                    onClick={() => {\n                      setLabelFilter('unlabeled')\n                    }}\n                  >\n                    unlabeled\n                  </Dropdown.Item>\n                  {filteredLabels.map(label => {\n                    return (\n                      <Dropdown.Item\n                        onSelect={() => {\n                          handleLabelSelection(label.labelName)\n                        }}\n                        href=''\n                        key={label.id}\n                        onClick={() => {\n                          setLabelFilter(label.labelName)\n                        }}\n                      >\n                        <Badge style={{ backgroundColor: label.labelColor }}>\n                          {label.labelName[0].toUpperCase()}\n                        </Badge>\n                        {label.labelName}\n                      </Dropdown.Item>\n                    )\n                  })}\n                </Dropdown.Menu>\n              </Dropdown>\n              <Button\n                href='/issues/new'\n                type='button'\n                className='add-issue-btn'\n                variant='outline-success'\n              >\n                Add Issue\n              </Button>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n        <Issue\n          issueFilter={filterIssue}\n          checkStatus={check}\n          sortParams={sort}\n          isShow={askDelete}\n          deleteSelections={deleteSelected}\n        />\n      </Container>\n    </div>\n  )\n}\n","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/createIssue.js",["110"],"import axios from 'axios'\nimport { barer_token } from '../custom/httpCustomValues'\n\nexport const createIssue = async (title, description, labels) => {\n  const url = 'issue'\n\n  let issue = {\n    title: title,\n    description: description,\n    labels: labels\n  }\n\n  const response = await axios.post(url, issue, {\n    headers: { Authorization: localStorage.getItem('token') }\n  })\n  return response\n}\n","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/getIssues.js",["111"],"import axios from 'axios'\nimport { barer_token } from '../custom/httpCustomValues'\n\nexport const getIssues = async () => {\n  const url = 'issues'\n\n  const response = await axios.get(url, {\n    headers: { Authorization: localStorage.getItem('token') }\n  })\n\n  return response\n}\n",["112","113"],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/getIssue.js",["114"],"import axios from 'axios'\nimport { barer_token } from '../custom/httpCustomValues'\n\nexport async function getIssue (id) {\n  const url = 'issue/' + id\n\n\n  const response = await axios.get(url, { headers: { Authorization: localStorage.getItem('token') }})\n  return response\n}\n","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/deleteIssue.js",[],["115","116"],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/editIssue.js",["117"],"import axios from 'axios'\nimport { barer_token } from '../custom/httpCustomValues'\n\nexport const editIssue = async (id, title, description) => {\n  const url = 'issue/' + id\n\n  let issue = {\n    title: title,\n    description: description\n  }\n\n  const headers = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': '*',\n    Authorization: localStorage.getItem('token'),\n    'Content-Type': 'application/json'\n  }\n\n  const response = await axios\n    .put(url, issue, {\n      headers: headers\n    })\n    .catch(e => console.log(e))\n\n  return response\n}\n","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/component/nav/Navigation.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/getLabels.js",["118"],"import axios from 'axios'\nimport { barer_token } from '../custom/httpCustomValues'\n\nexport const getLabels = async () => {\n  const url = 'issues/labels'\n\n  let response = await axios.get(url, {\n    headers: { Authorization: localStorage.getItem('token') }\n  })\n\n  return response\n}\n","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/model/issue/Issue.js",["119","120","121"],"import React, { useState, useEffect } from 'react'\nimport { Badge, Button, Form, FormCheck, Table } from 'react-bootstrap'\nimport { getFilteredIssues } from '../../service/getFilteredIssues'\nimport { getSortedIssues } from '../../service/getSortedIssues'\nimport { deleteSelectedIssues } from '../../service/deleteSelectedIssues'\nimport './scss/issue.scss'\n\nexport default function Issue (props) {\n  let [issues, setIssues] = useState([])\n  let [checkedIssues, setCheck] = useState([])\n\n  let { issueFilter, checkStatus, sortParams, isShow, deleteSelections } = props\n\n  const dateOptions = {\n    day: '2-digit',\n    year: '2-digit',\n    month: 'short'\n  }\n  const timeOptions = {\n    hour: '2-digit',\n    minute: '2-digit'\n  }\n\n  useEffect(() => {\n    getFilteredIssues(issueFilter).then(issue => {\n      if (issue.data.content === undefined) {\n        setIssues(issue.data)\n      }else {\n        setIssues(issue.data.content)\n      }\n    })\n  }, [issueFilter])\n\n  useEffect(() => {\n    if (sortParams !== '') {\n      getSortedIssues(sortParams).then(issue => {\n        setIssues(issue.data.content)\n      })\n    }\n  }, [sortParams])\n\n  useEffect(() => {\n    let tempArray = []\n    if (issues.length !== 0) {\n      issues.map(i => tempArray.push({ id: i.id, status: checkStatus }))\n      setCheck(tempArray)\n    }\n  }, [checkStatus]) //after select all changed\n\n  useEffect(() => {\n    let selected = []\n    let count = 0\n    if (checkedIssues.length !== 0) {\n      checkedIssues.map(c =>\n        c.status === true ? selected.push(c.id) && count++ : null\n      )\n    }\n    if (selected.length > 0 && count > 0) {\n      isShow('visible', false)\n    } else {\n      isShow('hidden', false)\n    }\n  }, [checkedIssues])\n\n  useEffect(() => {\n    if (deleteSelections === true) {\n      let selected = []\n      checkedIssues.map(c => (c.status === true ? selected.push(c.id) : null))\n      deleteSelectedIssues(selected).then(i => {\n        setIssues(i.data)\n      })\n\n      isShow('hidden', true)\n    }\n  }, [deleteSelections])\n\n  function getStatus (id) {\n    let status\n    let tempArray = []\n    if (issues.length !== 0) {\n      if (checkedIssues.length === 0) {\n        issues.map(i => tempArray.push({ id: i.id, status: false }))\n        setCheck(tempArray)\n        status = false\n      } else {\n        checkedIssues.map(i => (i.id === id ? (status = i.status) : null))\n      }\n    }\n    return status\n  }\n  function handleCheckBoxes (event, id) {\n    let tempArray = []\n    checkedIssues.map(i => tempArray.push(i))\n    tempArray.map((i, index) =>\n      i.id === id ? (tempArray[index].status = event.target.checked) : null\n    )\n    setCheck(tempArray)\n  }\n\n  return (\n    <Table striped bordered hover variant='dark'>\n      <tbody className='container'>\n        {issues &&\n          issues.map(issue => {\n            return (\n              <tr className='row' key={issue.id}>\n                <td className='col-12'>\n                  <div className='check-issue-container col-1'>\n                    <Form className='check-issue'>\n                      <FormCheck\n                        type='checkbox'\n                        checked={getStatus(issue.id) || false}\n                        onChange={e => {\n                          handleCheckBoxes(e, issue.id)\n                        }}\n                      ></FormCheck>\n                    </Form>\n                  </div>\n                  <div className='issue-body col-6'>\n                    <h4>\n                      {issue.title}\n                      <div className='edit-delete'>\n                        <Button\n                          variant='info'\n                          href={'/issues/detail/' + issue.id}\n                        >\n                          <i className='edit-icon'></i>\n                        </Button>\n                        <Button variant='danger'>\n                          <i className='delete-icon'></i>\n                        </Button>\n                      </div>\n                    </h4>\n                    <p className='description-text'>{issue.description}</p>\n                  </div>\n                  <div className='offset-1 col-2 times'>\n                    <div className='date-container'>\n                      created:{' '}\n                      <p className='date'>\n                        {new Date(issue.createTime).toLocaleDateString(\n                          'en-US',\n                          dateOptions\n                        )}\n                      </p>\n                      <p className='hour'>\n                        {new Date(issue.createTime).toLocaleTimeString(\n                          [],\n                          timeOptions\n                        )}\n                      </p>\n                    </div>\n                    <div className='date-container'>\n                      updated:{' '}\n                      <p className='date'>\n                        {new Date(issue.updateTime).toLocaleDateString(\n                          'en-US',\n                          dateOptions\n                        )}\n                      </p>\n                      <p className='hour'>\n                        {new Date(issue.updateTime).toLocaleTimeString(\n                          [],\n                          timeOptions\n                        )}\n                      </p>\n                    </div>\n                  </div>\n                  <div className='labels-container col-2'>\n                    <div className='labels'>\n                      {issue.labels.map(label => {\n                        return (\n                          <Badge\n                            pill\n                            style={{ backgroundColor: label.labelColor }}\n                            key={label.id}\n                          >\n                            #{label.labelName}\n                          </Badge>\n                        )\n                      })}\n                    </div>\n                  </div>\n                </td>\n              </tr>\n            )\n          })}\n      </tbody>\n    </Table>\n  )\n}\n","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/getFilteredIssues.js",["122"],"import axios from 'axios'\nimport { barer_token } from '../custom/httpCustomValues'\nimport { getIssues } from './getIssues'\n\nexport const getFilteredIssues = async searchFilter => {\n  const search_url = 'issues/search/'\n\n  let filterKeyword = searchFilter\n    .slice(searchFilter.indexOf(':') + 1)\n    .replace(/\\s/gi, '')\n\n  let keyword = searchFilter\n    .slice(0, searchFilter.indexOf(':'))\n    .replace(/\\s/gi, '')\n\n  let res\n\n  if (searchFilter === '' || filterKeyword === '') {\n    res = getIssues()\n  } else {\n    let full_url = search_url + keyword + '/' + filterKeyword\n    res = await axios.get(full_url, {\n      headers: { Authorization: localStorage.getItem('token') }\n    })\n  }\n  return res\n}\n","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/getSortedIssues.js",["123"],"import axios from 'axios'\nimport { barer_token } from '../custom/httpCustomValues'\n\nexport const getSortedIssues = async sortKeyword => {\n  const url = 'issues'\n  //orderType: \"desc\" for descending or \"asc\" for ascending\n  //byWhichSort: \"update\" for update time or \"createDate\" for create time\n  let params_string = ''\n\n  switch (sortKeyword) {\n    case 'Newest':\n      params_string = '?orderType=desc&byWhichSort=createDate'\n      break\n    case 'Oldest':\n      params_string = '?orderType=asc&byWhichSort=createDate'\n      break\n    case 'Recently Updated':\n      params_string = '?orderType=desc&byWhichSort=update'\n      break\n    case 'Least Recently Updated':\n      params_string = '?orderType=asc&byWhichSort=update'\n      break\n\n    default:\n      params_string = ''\n\n      break\n  }\n\n  let response = await axios.get(url + params_string, {\n    headers: { Authorization: localStorage.getItem('token') }\n  })\n\n  return response\n}\n","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/deleteSelectedIssues.js",["124"],"import axios from 'axios'\nimport { barer_token } from '../custom/httpCustomValues'\nimport { getIssues } from './getIssues'\n\nexport const deleteSelectedIssues = async issueList => {\n  const url = 'issues/' + issueList\n\n  await axios.delete(url, {\n    headers: { Authorization: localStorage.getItem('token') }\n  })\n  const response = getIssues()\n\n  return response\n}\n","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/component/issue/CreateIssue.js",["125"],"import React, { useState, useEffect } from 'react'\nimport { Button, Form, Row, Dropdown, Badge, InputGroup } from 'react-bootstrap'\nimport { getLabels } from '../../service/getLabels'\nimport { createIssue } from '../../service/createIssue'\nimport './scss/create-issue.scss'\n\nexport default function CreateIssue (props) {\n  let [labels, setLabels] = useState([])\n  let [filterOfLabel, setLabelFilter] = useState('')\n  let [filteredLabels, setFilteredLabels] = useState([])\n  let [selectedLabels, setSelectedLabels] = useState([])\n  let [title, setTitle] = useState('')\n  let [description, setDescription] = useState('')\n\n  const handleLabelSelection = (labelName, labelColor) => {\n    let tempArray = selectedLabels || [] //if selectedLabels is undefined\n    let allLabels = filteredLabels\n    if (tempArray.length === 0) {\n      allLabels.map(l =>\n        l.labelName === labelName\n          ? tempArray.push({ labelName: labelName, labelColor: labelColor })\n          : null\n      )\n    } else {\n      let founded = false\n      tempArray.map(l => (labelName === l.labelName ? (founded = true) : null))\n      founded\n        ? alert('Label is already added')\n        : tempArray.push({ labelName: labelName, labelColor: labelColor })\n    }\n    setSelectedLabels(tempArray)\n  }\n  const removeSelectedLabel = labelName => {\n    let tempArray = []\n    selectedLabels.map(a =>\n      a.labelName !== labelName ? tempArray.push(a) : null\n    )\n\n    setSelectedLabels(tempArray)\n  }\n\n  const handleTitle = event => {\n    setTitle(event.target.value)\n  }\n  const handleDescription = event => {\n    setDescription(event.target.value)\n  }\n  const addIssue = () => {\n    createIssue(title, description, selectedLabels)\n    props.history.push('/issues')\n  }\n\n  useEffect(() => {\n    let updatedLabels = []\n    if (labels.length === 0) {\n      getLabels().then(l => {\n        setFilteredLabels(l.data)\n        setLabels(l.data)\n      })\n    } else {\n      labels.map(fl =>\n        fl.labelName.search(filterOfLabel) !== -1\n          ? updatedLabels.push(fl)\n          : null\n      )\n      setFilteredLabels(updatedLabels)\n    }\n  }, [filterOfLabel])\n\n  return (\n    <div className='create-container container-fluid'>\n      <Row>\n        <div className='offset-1 col-7 issue-container'>\n          <Form>\n            <Form.Group>\n              <Form.Label className='title-label'>Title : </Form.Label>\n              <Form.Control\n                type='text'\n                className='add-title'\n                onChange={e => handleTitle(e)}\n                value={title}\n              ></Form.Control>\n              <Form.Label className='description-label'>\n                Description :{' '}\n              </Form.Label>\n              <textarea\n                className='add-description'\n                onChange={e => handleDescription(e)}\n                value={description}\n              ></textarea>\n              <Button\n                className='submit-issue'\n                type='button'\n                variant='outline-success'\n                onClick={() => addIssue()}\n                block\n              >\n                Create Issue\n              </Button>\n            </Form.Group>\n          </Form>\n        </div>\n        <div className='col-3 issue-props-container'>\n          <Dropdown className='label-dropdown'>\n            <Dropdown.Toggle id='dropdown-label' variant='outline-info' block>\n              Labels\n            </Dropdown.Toggle>\n            <div className='selected-labels-container'>\n              {selectedLabels &&\n                selectedLabels.map((labels, i) => {\n                  return (\n                    <Badge\n                      className='added-labels'\n                      key={i++}\n                      style={{ background: labels.labelColor }}\n                      onClick={() => removeSelectedLabel(labels.labelName)}\n                    >\n                      {labels.labelName}\n                    </Badge>\n                  )\n                })}\n            </div>\n            <Dropdown.Menu className='label-dropdown-container'>\n              <Form>\n                <InputGroup>\n                  <Form.Control\n                    type='text'\n                    placeholder='type something..'\n                    value={filterOfLabel}\n                    onChange={e => setLabelFilter(e.target.value)}\n                  ></Form.Control>\n                  <InputGroup.Append>\n                    <Button\n                      onClick={() => {\n                        setLabelFilter('')\n                      }}\n                      variant='outline-secondary'\n                    >\n                      <i className='clean-icon'></i>\n                    </Button>\n                  </InputGroup.Append>\n                </InputGroup>\n              </Form>\n              {filteredLabels.map(label => {\n                return (\n                  <Dropdown.Item\n                    onSelect={() => {\n                      handleLabelSelection(label.labelName, label.labelColor)\n                    }}\n                    href=''\n                    key={label.id}\n                    onClick={() => {\n                      setLabelFilter(label.labelName)\n                    }}\n                  >\n                    <Badge style={{ backgroundColor: label.labelColor }}>\n                      {label.labelName[0].toUpperCase()}\n                    </Badge>\n                    {label.labelName}\n                  </Dropdown.Item>\n                )\n              })}\n            </Dropdown.Menu>\n          </Dropdown>\n        </div>\n      </Row>\n    </div>\n  )\n}\n","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/component/issue/IssueDetail.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/addComment.js",["126"],"import axios from 'axios'\nimport { barer_token } from '../custom/httpCustomValues'\n\nexport const addComment = async (commentText, issueId) => {\n  const url = 'issue/' + issueId + '/comment'\n\n  let comment = { comment: commentText }\n\n  const response = await axios.post(url, comment, {\n    headers: { Authorization: localStorage.getItem('token') }\n  })\n\n  return response\n}\n","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/deleteComment.js",["127"],"import axios from 'axios'\nimport { barer_token } from '../custom/httpCustomValues'\n\nexport const deleteComment = async (issueId, commentId) => {\n  const url = 'issue/' + issueId + '/comment/' + commentId\n\n  console.log(url)\n  const response = await axios.delete(url, {\n    headers: { Authorization: localStorage.getItem('token') }\n  })\n\n  return response\n}\n","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/custom/httpCustomValues.js",[],"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/component/login/Login.js",["128"],"import React, { useState } from 'react'\nimport { Form, Row, Button } from 'react-bootstrap'\nimport axios from 'axios'\nimport history from '../../service/history'\nimport './scss/login.scss'\n\nexport default function Login (props) {\n  let [userName, setUserName] = useState('')\n  let [password, setPassword] = useState('')\n\n  const handleUserName = e => {\n    setUserName(e.target.value)\n  }\n  const handlePassword = e => {\n    setPassword(e.target.value)\n  }\n\n  const headers = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': '*',\n    'Content-Type': 'application/json'\n  }\n\n  const login = async () => {\n    await axios\n      .post(\n        '/login',\n        {\n          username: userName,\n          password: password\n        },\n        { headers: headers }\n      )\n      .then(r => {\n        localStorage.setItem('token', r.headers.authorization)\n        if (r.status === 200) {\n          window.location.reload()\n        }\n      })\n      .catch(e => alert('check your credentials!'))\n  }\n  return (\n    <div className='container-fluid'>\n      <Row>\n        <div className='offset-4 col-4 offset-4 form-container'>\n          <Form onSubmit={() => login()}>\n            <Form.Group controlId='formBasicUserName'>\n              <Form.Control\n                type='text'\n                placeholder='Enter username'\n                value={userName}\n                onChange={e => handleUserName(e)}\n                className='username-input'\n              />\n            </Form.Group>\n            <Form.Group controlId='formBasicPassword'>\n              <Form.Control\n                type='password'\n                placeholder='Password'\n                value={password}\n                onChange={e => handlePassword(e)}\n                className='password-input'\n              />\n            </Form.Group>\n            <Button\n              variant='primary'\n              type='button'\n              onClick={() => login()}\n              block\n            >\n              Submit\n            </Button>\n          </Form>\n        </div>\n      </Row>\n    </div>\n  )\n}\n","/root/Desktop/kodstar/issue-tracker-2020-2/web/src/service/history.js",[],{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","severity":1,"message":"134","line":43,"column":6,"nodeType":"135","endLine":43,"endColumn":21,"suggestions":"136"},{"ruleId":"137","severity":1,"message":"138","line":2,"column":10,"nodeType":"139","messageId":"140","endLine":2,"endColumn":21},{"ruleId":"137","severity":1,"message":"138","line":2,"column":10,"nodeType":"139","messageId":"140","endLine":2,"endColumn":21},{"ruleId":"129","replacedBy":"141"},{"ruleId":"131","replacedBy":"142"},{"ruleId":"137","severity":1,"message":"138","line":2,"column":10,"nodeType":"139","messageId":"140","endLine":2,"endColumn":21},{"ruleId":"129","replacedBy":"143"},{"ruleId":"131","replacedBy":"144"},{"ruleId":"137","severity":1,"message":"138","line":2,"column":10,"nodeType":"139","messageId":"140","endLine":2,"endColumn":21},{"ruleId":"137","severity":1,"message":"138","line":2,"column":10,"nodeType":"139","messageId":"140","endLine":2,"endColumn":21},{"ruleId":"133","severity":1,"message":"145","line":48,"column":6,"nodeType":"135","endLine":48,"endColumn":19,"suggestions":"146"},{"ruleId":"133","severity":1,"message":"147","line":63,"column":6,"nodeType":"135","endLine":63,"endColumn":21,"suggestions":"148"},{"ruleId":"133","severity":1,"message":"149","line":75,"column":6,"nodeType":"135","endLine":75,"endColumn":24,"suggestions":"150"},{"ruleId":"137","severity":1,"message":"138","line":2,"column":10,"nodeType":"139","messageId":"140","endLine":2,"endColumn":21},{"ruleId":"137","severity":1,"message":"138","line":2,"column":10,"nodeType":"139","messageId":"140","endLine":2,"endColumn":21},{"ruleId":"137","severity":1,"message":"138","line":2,"column":10,"nodeType":"139","messageId":"140","endLine":2,"endColumn":21},{"ruleId":"133","severity":1,"message":"134","line":68,"column":6,"nodeType":"135","endLine":68,"endColumn":21,"suggestions":"151"},{"ruleId":"137","severity":1,"message":"138","line":2,"column":10,"nodeType":"139","messageId":"140","endLine":2,"endColumn":21},{"ruleId":"137","severity":1,"message":"138","line":2,"column":10,"nodeType":"139","messageId":"140","endLine":2,"endColumn":21},{"ruleId":"137","severity":1,"message":"152","line":4,"column":8,"nodeType":"139","messageId":"140","endLine":4,"endColumn":15},"no-native-reassign",["153"],"no-negated-in-lhs",["154"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'labels'. Either include it or remove the dependency array.","ArrayExpression",["155"],"no-unused-vars","'barer_token' is defined but never used.","Identifier","unusedVar",["153"],["154"],["153"],["154"],"React Hook useEffect has a missing dependency: 'issues'. Either include it or remove the dependency array.",["156"],"React Hook useEffect has a missing dependency: 'isShow'. Either include it or remove the dependency array.",["157"],"React Hook useEffect has missing dependencies: 'checkedIssues' and 'isShow'. Either include them or remove the dependency array.",["158"],["159"],"'history' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"160","fix":"168"},"Update the dependencies array to be: [filterOfLabel, labels]",{"range":"169","text":"170"},"Update the dependencies array to be: [checkStatus, issues]",{"range":"171","text":"172"},"Update the dependencies array to be: [checkedIssues, isShow]",{"range":"173","text":"174"},"Update the dependencies array to be: [checkedIssues, deleteSelections, isShow]",{"range":"175","text":"176"},{"range":"177","text":"170"},[1123,1138],"[filterOfLabel, labels]",[1319,1332],"[checkStatus, issues]",[1698,1713],"[checkedIssues, isShow]",[2001,2019],"[checkedIssues, deleteSelections, isShow]",[2120,2135]]