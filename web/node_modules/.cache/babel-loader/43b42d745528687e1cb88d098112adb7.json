{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/root/Desktop/kodstar/issue-tracker-2020-2/web/src/component/issue/Issues.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Container, Form, Navbar, Nav, Dropdown, Badge } from 'react-bootstrap';\nimport Issue from '../../model/issue/Issue';\nimport { getLabels } from '../../service/getLabels';\nimport './scss/issues.scss';\nexport default function Issues() {\n  _s();\n\n  // var _ = require('lodash')\n  let [labels, setItem] = useState([]);\n  let [filteredLabels, setFilteredLabels] = useState([]);\n  let [filterOfLabel, setLabelFilter] = useState('');\n  let [filterIssue, setIssueFilter] = useState('');\n  useEffect(() => {\n    getLabels().then(labels => {\n      setItem(labels.data);\n      setFilteredLabels(labels.data);\n    });\n  }, []);\n  useEffect(() => {\n    let updatedLabels = [];\n    labels.forEach(element => element.labelName.search(filterOfLabel) !== -1 ? updatedLabels.push(element) : null);\n    setFilteredLabels([...updatedLabels]);\n  }, [filterOfLabel]);\n\n  const handleFilterIssue = e => {\n    setIssueFilter(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"issue-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      collapseOnSelect: true,\n      expand: \"lg\",\n      bg: \"dark\",\n      variant: \"dark\",\n      children: [/*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Check, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-container\",\n          children: /*#__PURE__*/_jsxDEV(Form.Control, {\n            className: \"search\",\n            placeholder: \"(default )title: description:\",\n            onChange: handleFilterIssue.bind(this),\n            value: filterIssue\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Navbar.Toggle, {\n        \"aria-controls\": \"responsive-navbar-nav\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Navbar.Collapse, {\n        id: \"responsive-navbar-nav\",\n        children: [/*#__PURE__*/_jsxDEV(Nav, {\n          className: \"mr-auto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Nav, {\n          children: /*#__PURE__*/_jsxDEV(Dropdown, {\n            children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n              id: \"dropdown-basic\",\n              variant: \"outline-info\",\n              children: \"Label\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n              className: \"dropdown-container\",\n              children: [/*#__PURE__*/_jsxDEV(Form, {\n                children: /*#__PURE__*/_jsxDEV(Form.Control, {\n                  type: \"text\",\n                  placeholder: \"type something..\",\n                  value: filterOfLabel,\n                  onChange: e => setLabelFilter(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 60,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n                onClick: () => {\n                  setLabelFilter('unlabeled');\n                },\n                children: \"unlabeled\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 17\n              }, this), filteredLabels.map(label => {\n                return /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n                  href: \"\",\n                  onClick: () => {\n                    setLabelFilter(label.labelName);\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(Badge, {\n                    style: {\n                      backgroundColor: label.labelColor\n                    },\n                    children: label.labelName[0].toUpperCase()\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 83,\n                    columnNumber: 23\n                  }, this), label.labelName]\n                }, label.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 76,\n                  columnNumber: 21\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Issue, {\n      issueFilter: filterIssue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Issues, \"EPd1x1VT2eViMNJhjO7twEXkLkU=\");\n\n_c = Issues;\n\nvar _c;\n\n$RefreshReg$(_c, \"Issues\");","map":{"version":3,"sources":["/root/Desktop/kodstar/issue-tracker-2020-2/web/src/component/issue/Issues.js"],"names":["React","useEffect","useState","Container","Form","Navbar","Nav","Dropdown","Badge","Issue","getLabels","Issues","labels","setItem","filteredLabels","setFilteredLabels","filterOfLabel","setLabelFilter","filterIssue","setIssueFilter","then","data","updatedLabels","forEach","element","labelName","search","push","handleFilterIssue","e","target","value","bind","map","label","backgroundColor","labelColor","toUpperCase","id"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Container, Form, Navbar, Nav, Dropdown, Badge } from 'react-bootstrap'\nimport Issue from '../../model/issue/Issue'\nimport { getLabels } from '../../service/getLabels'\n\nimport './scss/issues.scss'\n\nexport default function Issues () {\n  // var _ = require('lodash')\n  let [labels, setItem] = useState([])\n  let [filteredLabels, setFilteredLabels] = useState([])\n  let [filterOfLabel, setLabelFilter] = useState('')\n  let [filterIssue, setIssueFilter] = useState('')\n\n  useEffect(() => {\n    getLabels().then(labels => {\n      setItem(labels.data)\n      setFilteredLabels(labels.data)\n    })\n  }, [])\n\n  useEffect(() => {\n    let updatedLabels = []\n    labels.forEach(element =>\n      element.labelName.search(filterOfLabel) !== -1\n        ? updatedLabels.push(element)\n        : null\n    )\n    setFilteredLabels([...updatedLabels])\n  }, [filterOfLabel])\n\n  const handleFilterIssue = e => {\n    setIssueFilter(e.target.value)\n  }\n\n  return (\n    <Container className='issue-container'>\n      <Navbar collapseOnSelect expand='lg' bg='dark' variant='dark'>\n        <Form>\n          <Form.Check></Form.Check>\n          <div className='search-container'>\n            <Form.Control\n              className='search'\n              placeholder='(default )title: description:'\n              onChange={handleFilterIssue.bind(this)}\n              value={filterIssue}\n            ></Form.Control>\n          </div>\n        </Form>\n        <Navbar.Toggle aria-controls='responsive-navbar-nav' />\n        <Navbar.Collapse id='responsive-navbar-nav'>\n          <Nav className='mr-auto'></Nav>\n          <Nav>\n            <Dropdown>\n              <Dropdown.Toggle id='dropdown-basic' variant='outline-info'>\n                Label\n              </Dropdown.Toggle>\n              <Dropdown.Menu className='dropdown-container'>\n                <Form>\n                  <Form.Control\n                    type='text'\n                    placeholder='type something..'\n                    value={filterOfLabel}\n                    onChange={e => setLabelFilter(e.target.value)}\n                  ></Form.Control>\n                </Form>\n                <Dropdown.Item\n                  onClick={() => {\n                    setLabelFilter('unlabeled')\n                  }}\n                >\n                  unlabeled\n                </Dropdown.Item>\n                {filteredLabels.map(label => {\n                  return (\n                    <Dropdown.Item\n                      href=''\n                      key={label.id}\n                      onClick={() => {\n                        setLabelFilter(label.labelName)\n                      }}\n                    >\n                      <Badge style={{ backgroundColor: label.labelColor }}>\n                        {label.labelName[0].toUpperCase()}\n                      </Badge>\n                      {label.labelName}\n                    </Dropdown.Item>\n                  )\n                })}\n              </Dropdown.Menu>\n            </Dropdown>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n      <Issue issueFilter={filterIssue}/>\n    </Container>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}